"""
Initialize the database with C programming levels and lessons
"""
from sqlalchemy.orm import sessionmaker
from app.core.database import engine
from app.models import Level, Lesson, Achievement, LessonType, DifficultyLevel
from app.services.ai_service import C_PROGRAMMING_LEVELS

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def create_levels_and_lessons():
    db = SessionLocal()
    
    try:
        # Check if levels already exist
        existing_levels = db.query(Level).count()
        if existing_levels > 0:
            print("Levels already exist. Skipping initialization.")
            return
        
        # Create levels and lessons
        for level_num, level_data in C_PROGRAMMING_LEVELS.items():
            # Create level
            level = Level(
                level_number=level_num,
                title=level_data["title"],
                description=level_data["description"],
                required_xp=level_num * 100,  # Increasing XP requirement
                is_active=True
            )
            db.add(level)
            db.flush()  # Get the ID
            
            # Create lessons for this level
            for i, lesson_title in enumerate(level_data["lessons"], 1):
                lesson = Lesson(
                    level_id=level.id,
                    lesson_number=i,
                    title=lesson_title,
                    description=f"Learn about {lesson_title} in C programming",
                    content="",  # Will be generated by AI later
                    lesson_type=LessonType.THEORY if i % 2 == 1 else LessonType.CODING_EXERCISE,
                    difficulty=DifficultyLevel.BEGINNER if level_num <= 3 else 
                              DifficultyLevel.INTERMEDIATE if level_num <= 7 else 
                              DifficultyLevel.ADVANCED,
                    xp_reward=10 + (level_num * 2),  # Increasing rewards
                    is_active=True
                )
                db.add(lesson)
            
            print(f"Created Level {level_num}: {level_data['title']} with {len(level_data['lessons'])} lessons")
        
        # Create default achievements
        achievements = [
            {
                "name": "First Steps",
                "description": "Complete your first lesson",
                "icon": "🎯",
                "requirement_type": "lessons_completed",
                "requirement_value": 1,
                "xp_reward": 50
            },
            {
                "name": "Week Warrior",
                "description": "Maintain a 7-day streak",
                "icon": "🔥",
                "requirement_type": "streak",
                "requirement_value": 7,
                "xp_reward": 100
            },
            {
                "name": "C Beginner",
                "description": "Complete Level 1",
                "icon": "📚",
                "requirement_type": "level_completed",
                "requirement_value": 1,
                "xp_reward": 150
            },
            {
                "name": "Coding Novice",
                "description": "Complete 10 lessons",
                "icon": "💻",
                "requirement_type": "lessons_completed",
                "requirement_value": 10,
                "xp_reward": 200
            },
            {
                "name": "XP Hunter",
                "description": "Earn 1000 XP",
                "icon": "⭐",
                "requirement_type": "xp_earned",
                "requirement_value": 1000,
                "xp_reward": 250
            },
            {
                "name": "C Master",
                "description": "Complete all 10 levels",
                "icon": "👑",
                "requirement_type": "level_completed",
                "requirement_value": 10,
                "xp_reward": 1000
            }
        ]
        
        for ach_data in achievements:
            achievement = Achievement(**ach_data)
            db.add(achievement)
        
        db.commit()
        print(f"Successfully created {len(C_PROGRAMMING_LEVELS)} levels and {len(achievements)} achievements!")
        
    except Exception as e:
        print(f"Error creating levels: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_levels_and_lessons()